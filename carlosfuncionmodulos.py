# -*- coding: utf-8 -*-
"""CarlosFuncionModulos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bH6BuW-2wQkHyyrFawG_604Wf0STTf1W
"""

## !pip install geopandas &> /dev/null
## !pip install pygeos &> /dev/null

## Funcion Importar Librerias
def FuncImportLib():
  import pandas as pd
  from matplotlib import pyplot as plt
  import time
  import shapely
  import datetime
  import fiona
  import pygeos

##Funcion Encontrar Coordenadas
def BuscarExcel():
  from IPython.core.display import os
  Directorio = '/content/'
  Ext = ('xlsx')
  for files in os.listdir(Directorio):
      if files.endswith(Ext):
        Excel = str(files)
  return Excel

## Funcion creacion de poligono
def AutoPoli(excelArchivoSubido):
  import openpyxl
  from shapely.geometry.polygon import Polygon
  import geopandas
  ## Abrir archivo Excel
  LibroCoordenadas = openpyxl.load_workbook(excelArchivoSubido, data_only=False)
  HojaCoordenadas = LibroCoordenadas.active
  ## Definicion del rango de celdas donde estan las coordenadas
  rangoCeldas = HojaCoordenadas["A2":("B"+str(HojaCoordenadas.max_row))]
  ## Creacion de listas X Y para agregar a poligono
  Lista_X = []
  Lista_Y = []
  for a, b in rangoCeldas:
      Lista_X.append(a.value)
      Lista_Y.append(b.value)
  ## Copiar la primer coordenada y agregarla al final del poligono para cerrarlo despues
  Lista_X.append(rangoCeldas[0][0].value)
  Lista_Y.append(rangoCeldas[0][1].value)
  ## Crear Poligono
  GeometriaDelPoligonoNuevo = Polygon(zip(Lista_X,Lista_Y))
  crsPoligon = 'EPSG:32616'
  GDFPoligonoNuevo = geopandas.GeoDataFrame(crs=crsPoligon, geometry=[GeometriaDelPoligonoNuevo])
  return GDFPoligonoNuevo

def funVisMapaPoli(PoligonoGDF):
  import folium
  from folium import plugins
  from matplotlib.bezier import make_path_regular
  import geopandas as gpd
  gpd.options.use_pygeos=True
  basemaps = {
      'Google Satellite Hybrid': folium.TileLayer(
          tiles = 'https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}',
          attr = 'Google',
          name = 'Google Satellite',
          overlay = True,
          control = True
      )
  }
  Centroides = GDFPoligonoNuevo.to_crs("EPSG:4326").copy()
  mapa = folium.Map(location=(Centroides.centroid.y,Centroides.centroid.x),zoom_start=14,width='50%',height='50%', )
  folium.Choropleth(geo_data=GDFPoligonoNuevo, fill_color= 'none', line_color='blue', line_weight=3).add_to(mapa)
  folium.TileLayer('cartodbpositron').add_to(mapa)
  basemaps['Google Satellite Hybrid'].add_to(mapa)
  folium.LayerControl().add_to(mapa)
  #plugins.MousePosition(position='topright', separator=' | ', prefix="Mouse:",lat_formatter=fmtr, lng_formatter=fmtr).add_to(mapa)
  #Add the draw 
  #plugins.Draw(export=True, filename='data.geojson', position='topleft', draw_options=None, edit_options=None).add_to(mapa)  
  #Add measure tool 
  #plugins.MeasureControl(position='topright', primary_length_unit='meters', secondary_length_unit='miles', primary_area_unit='sqmeters', secondary_area_unit='acres').add_to(mapa)
  return mapa

def funVisMapaPoli(PoligonoGDF):
  import folium
  from folium import plugins
  from matplotlib.bezier import make_path_regular
  import geopandas as gpd
  gpd.options.use_pygeos=True
  basemaps = {
      'Google Satellite Hybrid': folium.TileLayer(
          tiles = 'https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}',
          attr = 'Google',
          name = 'Google Satellite',
          overlay = True,
          control = True
      )
  }
  Centroides = PoligonoGDF.to_crs("EPSG:4326").copy()
  mapa = folium.Map(location=(Centroides.centroid.y,Centroides.centroid.x),zoom_start=14,width='50%',height='50%', )
  folium.Choropleth(geo_data=PoligonoGDF, fill_color= 'none', line_color='blue', line_weight=3).add_to(mapa)
  folium.TileLayer('cartodbpositron').add_to(mapa)
  basemaps['Google Satellite Hybrid'].add_to(mapa)
  folium.LayerControl().add_to(mapa)
  #plugins.MousePosition(position='topright', separator=' | ', prefix="Mouse:",lat_formatter=fmtr, lng_formatter=fmtr).add_to(mapa)
  #Add the draw 
  #plugins.Draw(export=True, filename='data.geojson', position='topleft', draw_options=None, edit_options=None).add_to(mapa)  
  #Add measure tool 
  #plugins.MeasureControl(position='topright', primary_length_unit='meters', secondary_length_unit='miles', primary_area_unit='sqmeters', secondary_area_unit='acres').add_to(mapa)
  return mapa

def FunExporSHP(PoligonoGDF):
  GDFPoligonoNuevo.to_file(filename=r"/content/Poligono.shp.zip", driver="ESRI Shapefile",schema=None, index=None)

#from google.colab import files

#with open('example.txt', 'w') as f:
  #f.write('some content')

#files.download('example.txt')